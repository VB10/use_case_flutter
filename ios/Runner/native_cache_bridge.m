// Autogenerated from Pigeon (v4.1.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "native_cache_bridge.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface Value ()
+ (Value *)fromMap:(NSDictionary *)dict;
+ (nullable Value *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface ResultModel ()
+ (ResultModel *)fromMap:(NSDictionary *)dict;
+ (nullable ResultModel *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation Value
+ (instancetype)makeWithNumber:(nullable NSNumber *)number {
  Value* pigeonResult = [[Value alloc] init];
  pigeonResult.number = number;
  return pigeonResult;
}
+ (Value *)fromMap:(NSDictionary *)dict {
  Value *pigeonResult = [[Value alloc] init];
  pigeonResult.number = GetNullableObject(dict, @"number");
  return pigeonResult;
}
+ (nullable Value *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [Value fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"number" : (self.number ?: [NSNull null]),
  };
}
@end

@implementation ResultModel
+ (instancetype)makeWithResult:(Results)result
    token:(nullable NSString *)token {
  ResultModel* pigeonResult = [[ResultModel alloc] init];
  pigeonResult.result = result;
  pigeonResult.token = token;
  return pigeonResult;
}
+ (ResultModel *)fromMap:(NSDictionary *)dict {
  ResultModel *pigeonResult = [[ResultModel alloc] init];
  pigeonResult.result = [GetNullableObject(dict, @"result") integerValue];
  pigeonResult.token = GetNullableObject(dict, @"token");
  return pigeonResult;
}
+ (nullable ResultModel *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [ResultModel fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"result" : @(self.result),
    @"token" : (self.token ?: [NSNull null]),
  };
}
@end

@interface Api2HostCodecReader : FlutterStandardReader
@end
@implementation Api2HostCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [ResultModel fromMap:[self readValue]];
    
    case 129:     
      return [Value fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface Api2HostCodecWriter : FlutterStandardWriter
@end
@implementation Api2HostCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[ResultModel class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[Value class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface Api2HostCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation Api2HostCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[Api2HostCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[Api2HostCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *Api2HostGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    Api2HostCodecReaderWriter *readerWriter = [[Api2HostCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void Api2HostSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<Api2Host> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api2Host.calculate"
        binaryMessenger:binaryMessenger
        codec:Api2HostGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(calculateValue:completion:)], @"Api2Host api (%@) doesn't respond to @selector(calculateValue:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        Value *arg_value = GetNullableObjectAtIndex(args, 0);
        [api calculateValue:arg_value completion:^(Value *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.Api2Host.tokenParse"
        binaryMessenger:binaryMessenger
        codec:Api2HostGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(tokenParseId:error:)], @"Api2Host api (%@) doesn't respond to @selector(tokenParseId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_id = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        ResultModel *output = [api tokenParseId:arg_id error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
